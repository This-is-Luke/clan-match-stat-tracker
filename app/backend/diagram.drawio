<mxfile host="app.diagrams.net" modified="2024-07-05T08:22:11.682Z" agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36" etag="d-k9TbDBKrrhrYiV94yB" version="24.6.4" type="device">
  <diagram id="pUzfgVnz7XkT4wG61MmF" name="Page-1">
    <mxGraphModel dx="26147" dy="4243" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="0" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="122" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontSize=102;fontColor=#000000;strokeWidth=5;fillColor=#fad9d5;strokeColor=#FF33FF;" parent="1" source="2" target="4" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="123" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontSize=102;fontColor=#000000;strokeColor=#FF33FF;strokeWidth=5;" parent="1" source="2" target="14" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="124" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontSize=102;fontColor=#000000;strokeColor=#FF33FF;strokeWidth=5;" parent="1" source="2" target="38" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-139" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;strokeColor=#FF00FF;strokeWidth=6;" edge="1" parent="1" source="2" target="48">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-157" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=1;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;strokeColor=#FF00FF;strokeWidth=6;" edge="1" parent="1" source="2" target="66">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="2" value="&lt;font style=&quot;font-size: 102px;&quot;&gt;server.js&lt;/font&gt;" style="ellipse;whiteSpace=wrap;html=1;fillColor=#FF33FF;fontColor=#ffffff;strokeColor=#A50040;" parent="1" vertex="1">
          <mxGeometry x="-18490" y="900" width="811.2" height="676" as="geometry" />
        </mxCell>
        <mxCell id="27" style="edgeStyle=none;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontSize=16;fontColor=#FFFFFF;" parent="1" source="4" target="6" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="4" value="&lt;font style=&quot;font-size: 16px;&quot; color=&quot;#000000&quot;&gt;Config&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#66FF66;strokeWidth=10;" parent="1" vertex="1">
          <mxGeometry x="-18810" y="-600" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="NF-qdsWI1Lk5tkT5xwey-100" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;strokeWidth=4;strokeColor=#66FF66;" parent="1" source="6" target="9" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="NF-qdsWI1Lk5tkT5xwey-101" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;strokeWidth=4;strokeColor=#66FF66;" parent="1" source="6" target="10" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="128" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;strokeColor=#66FF66;strokeWidth=4;fontSize=102;fontColor=#000000;" parent="1" source="6" target="11" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="6" value="db.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-18645" y="-610" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="95" style="edgeStyle=orthogonalEdgeStyle;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontSize=16;fontColor=#FFFFFF;strokeWidth=4;strokeColor=#66FF66;" parent="1" source="9" target="94" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="9" value="default.json" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#008a00;strokeColor=#005700;" parent="1" vertex="1">
          <mxGeometry x="-18555" y="-530" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="NF-qdsWI1Lk5tkT5xwey-107" style="rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;edgeStyle=orthogonalEdgeStyle;strokeWidth=4;strokeColor=#66FF66;" parent="1" source="10" target="98" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="-18335" y="-360" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="10" value="test.json" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#008a00;strokeColor=#005700;" parent="1" vertex="1">
          <mxGeometry x="-18555" y="-440" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="11" value="&lt;p style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;The &lt;code style=&quot;&quot;&gt;db.js&lt;/code&gt; file typically plays a crucial role in setting up and managing the connection to the database in a Node.js application. Here&#39;s a breakdown of its likely functions and responsibilities:&lt;/font&gt;&lt;/p&gt;&lt;h3 style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;strong&gt;Database Configuration: &lt;/strong&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;The&lt;/span&gt;&lt;/font&gt;&amp;nbsp;&lt;code style=&quot;background-color: initial; font-weight: normal;&quot;&gt;db.js&lt;/code&gt;&lt;span style=&quot;background-color: initial; font-weight: normal;&quot;&gt; file will often import configuration settings for the database, such as the database URL, port, and authentication details. These configurations are usually stored in environment variables or configuration files (like &lt;/span&gt;&lt;code style=&quot;background-color: initial; font-weight: normal;&quot;&gt;default.json&lt;/code&gt;&lt;span style=&quot;background-color: initial; font-weight: normal;&quot;&gt; or &lt;/span&gt;&lt;code style=&quot;background-color: initial; font-weight: normal;&quot;&gt;.env&lt;/code&gt;&lt;span style=&quot;background-color: initial; font-weight: normal;&quot;&gt;).&lt;/span&gt;&lt;/h3&gt;&lt;h3 style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;strong&gt;Establishing Connection:&amp;nbsp;&lt;/strong&gt;&lt;/font&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;It contains the logic to establish a connection to the database using a library like &lt;/span&gt;&lt;code style=&quot;background-color: initial; font-weight: normal;&quot;&gt;mongoose&lt;/code&gt;&lt;span style=&quot;background-color: initial; font-weight: normal;&quot;&gt; for MongoDB or &lt;/span&gt;&lt;code style=&quot;background-color: initial; font-weight: normal;&quot;&gt;sequelize&lt;/code&gt;&lt;span style=&quot;background-color: initial; font-weight: normal;&quot;&gt; for SQL databases. This involves creating a connection instance that the rest of the application can use to interact with the database.&lt;/span&gt;&lt;/h3&gt;&lt;h3 style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;strong&gt;Connection Management:&amp;nbsp;&lt;/strong&gt;&lt;/font&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;The &lt;code style=&quot;background-color: initial;&quot;&gt;d&lt;/code&gt;&lt;/span&gt;&lt;code style=&quot;background-color: initial; font-weight: normal;&quot;&gt;b.js&lt;/code&gt;&lt;span style=&quot;background-color: initial; font-weight: normal;&quot;&gt; file manages the database connection lifecycle. This includes handling events like connection success, connection error, and disconnection. Proper error handling ensures that the application can respond appropriately to database connection issues.&lt;/span&gt;&lt;/h3&gt;&lt;h3 style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;strong&gt;Exporting the Connection:&amp;nbsp;&lt;/strong&gt;&lt;/font&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;Once the connection is established, the &lt;code style=&quot;background-color: initial;&quot;&gt;db.js&lt;/code&gt;&lt;span style=&quot;background-color: initial;&quot;&gt; file exports the connection instance so that it can be imported and used in other parts of the application, such as models and services.&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=16;fontColor=#000000;align=left;perimeterSpacing=5;fillColor=#FFFFFF;strokeColor=#66FF66;strokeWidth=10;spacing=10;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="-18810" y="-1090" width="450" height="370" as="geometry" />
        </mxCell>
        <mxCell id="21" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontSize=16;fontColor=#FFFFFF;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="14" target="20" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="22" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontSize=16;fontColor=#FFFFFF;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="14" target="17" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="23" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontSize=16;fontColor=#FFFFFF;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="14" target="18" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="24" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontSize=16;fontColor=#FFFFFF;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="14" target="15" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="25" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontSize=16;fontColor=#FFFFFF;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="14" target="16" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="26" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontSize=16;fontColor=#FFFFFF;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="14" target="19" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="14" value="&lt;font style=&quot;font-size: 16px;&quot; color=&quot;#000000&quot;&gt;Middleware&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#3333FF;strokeWidth=10;" parent="1" vertex="1">
          <mxGeometry x="-17582.5" y="-210" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="101" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="15" target="NF-qdsWI1Lk5tkT5xwey-116" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="15" value="logger.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-17357.5" y="50" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="102" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="16" target="uyjnw9hmqIAHE5pw0u9W-98" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="16" value="rateLimiter.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-17357.5" y="140" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="NF-qdsWI1Lk5tkT5xwey-112" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="17" target="30" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="17" value="auth.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-17357.5" y="-130" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="100" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="18" target="NF-qdsWI1Lk5tkT5xwey-111" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="18" value="errorHandler.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-17357.5" y="-40" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="104" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="19" target="uyjnw9hmqIAHE5pw0u9W-103" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="19" value="validate.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-17357.5" y="230" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="99" style="edgeStyle=orthogonalEdgeStyle;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="20" target="NF-qdsWI1Lk5tkT5xwey-109" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="20" value="adminAuth.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-17357.5" y="-220" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="30" value="&lt;h3 style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;Token Verification Middleware&lt;/font&gt;&lt;/h3&gt;&lt;h4 style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;Purpose:&lt;/font&gt;&lt;font style=&quot;font-weight: normal; font-size: 12px;&quot;&gt; This middleware functiom the purpose and validity of a JSON Tpkem (JWT) in incoming requests to secure routes. It ensures that only authorised userd can assess certain endpoints.&amp;nbsp;&lt;/font&gt;&lt;/font&gt;&lt;/h4&gt;&lt;h4 style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-weight: normal; font-size: 12px;&quot;&gt;A&lt;/font&gt;uthentication&lt;span style=&quot;background-color: initial; font-weight: normal;&quot;&gt;: Ensures that requests to protected routes include a valid JWT token.&amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;/h4&gt;&lt;h4 style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;User Identification&lt;span style=&quot;background-color: initial; font-weight: normal;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;background-color: initial; font-weight: normal;&quot;&gt; Decodes the token to retrieve user information, which is then attached to the &lt;/span&gt;&lt;code style=&quot;font-weight: normal;&quot;&gt;req.user&lt;/code&gt;&lt;span style=&quot;background-color: initial; font-weight: normal;&quot;&gt; object for further use in the request lifecycle.&amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;/h4&gt;&lt;h4 style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;Security&lt;span style=&quot;background-color: initial; font-weight: normal;&quot;&gt;: Prevents unauthorized access by validating tokens.&lt;/span&gt;&lt;/font&gt;&lt;/h4&gt;&lt;h4 style=&quot;font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;User Context&lt;span style=&quot;background-color: initial; font-weight: normal;&quot;&gt;: Provides user context to the request, enabling user-specific operations in subsequent middleware or route handlers.&lt;/span&gt;&lt;/font&gt;&lt;/h4&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=16;fontColor=#000000;align=left;perimeterSpacing=5;fillColor=#FFFFFF;spacing=10;gradientColor=none;strokeColor=#3333FF;strokeWidth=10;" parent="1" vertex="1">
          <mxGeometry x="-17377.5" y="-690" width="320" height="320" as="geometry" />
        </mxCell>
        <mxCell id="118" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#00FFFF;" parent="1" source="38" target="78" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="119" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#00FFFF;" parent="1" source="38" target="77" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="120" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#00FFFF;" parent="1" source="38" target="75" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="121" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#00FFFF;" parent="1" source="38" target="74" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="38" value="&lt;font color=&quot;#000000&quot;&gt;Models&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#FFFFFF;strokeWidth=10;strokeColor=#00FFFF;" parent="1" vertex="1">
          <mxGeometry x="-15740" y="1090" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-124" style="rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;" parent="1" source="48" target="49" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-130" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeColor=#FF66B3;strokeWidth=6;" edge="1" parent="1" source="48" target="F73SnjRVBJ_aOkL58M_I-129">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-152" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;strokeColor=#FF66B3;strokeWidth=6;" edge="1" parent="1" source="48" target="50">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="-17920" y="2460" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-153" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;strokeColor=#FF66B3;strokeWidth=6;" edge="1" parent="1" source="48" target="51">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-155" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;strokeColor=#FF66B3;strokeWidth=6;" edge="1" parent="1" source="48" target="52">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-156" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;strokeColor=#FF66B3;strokeWidth=6;" edge="1" parent="1" source="48" target="53">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="48" value="&lt;font color=&quot;#000000&quot;&gt;routes&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelBackgroundColor=none;fontColor=#aea7a7;fillColor=#FFFFFF;strokeColor=#FF66B3;strokeWidth=6;perimeterSpacing=6;" parent="1" vertex="1">
          <mxGeometry x="-18144.4" y="2320" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-148" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;strokeColor=#FF66B3;strokeWidth=6;" edge="1" parent="1" source="50" target="uyjnw9hmqIAHE5pw0u9W-134">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="50" value="auth.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;labelBackgroundColor=none;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-17857.5" y="2410" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-149" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;strokeColor=#FF66B3;strokeWidth=6;" edge="1" parent="1" source="51" target="F73SnjRVBJ_aOkL58M_I-133">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="51" value="managers.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;labelBackgroundColor=none;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-17860" y="2510" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-159" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;strokeColor=#006600;strokeWidth=6;" edge="1" parent="1" source="66" target="67">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-164" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=1;entryY=0.5;entryDx=0;entryDy=0;strokeColor=#006600;endSize=6;strokeWidth=6;" edge="1" parent="1" source="66" target="68">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="-18950" y="1580" />
              <mxPoint x="-18950" y="1670" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-165" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=1;entryY=0.5;entryDx=0;entryDy=0;strokeColor=#006600;strokeWidth=6;" edge="1" parent="1" source="66" target="69">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="-18950" y="1580" />
              <mxPoint x="-18950" y="1760" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="66" value="services" style="rounded=0;whiteSpace=wrap;html=1;labelBackgroundColor=none;fontColor=#000000;fillColor=none;strokeColor=#006600;strokeWidth=6;perimeterSpacing=6;" parent="1" vertex="1">
          <mxGeometry x="-18930" y="1550" width="130" height="60" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-166" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;strokeWidth=6;strokeColor=#006600;" edge="1" parent="1" source="67" target="F73SnjRVBJ_aOkL58M_I-158">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="67" value="emailService.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;labelBackgroundColor=none;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-19110" y="1540" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-167" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;strokeColor=#006600;strokeWidth=6;" edge="1" parent="1" source="68" target="F73SnjRVBJ_aOkL58M_I-160">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="68" value="notificationService.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;labelBackgroundColor=none;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-19110" y="1630" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-168" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;strokeColor=#006600;strokeWidth=6;" edge="1" parent="1" source="69" target="F73SnjRVBJ_aOkL58M_I-162">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="69" value="userServices.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;labelBackgroundColor=none;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-19110" y="1720" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="116" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#00FFFF;" parent="1" source="74" target="uyjnw9hmqIAHE5pw0u9W-119" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="74" value="user.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-15482.5" y="1410" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="115" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#00FFFF;" parent="1" source="75" target="uyjnw9hmqIAHE5pw0u9W-115" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="75" value="score.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-15482.5" y="1320" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="112" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#00FFFF;" parent="1" source="77" target="uyjnw9hmqIAHE5pw0u9W-111" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="77" value="match.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-15482.5" y="1230" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="111" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#00FFFF;" parent="1" source="78" target="uyjnw9hmqIAHE5pw0u9W-107" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="78" value="clan.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;fontSize=16;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-15482.5" y="1140" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="94" value="&lt;blockquote style=&quot;margin: 0 0 0 40px; border: none; padding: 0px;&quot;&gt;&lt;/blockquote&gt;Contains the default configuration settings for the application. These settings include various environment variables and configuration options that the application needs to run.&lt;br&gt;&lt;strong&gt;&lt;br&gt;Centralized Configuration Management&lt;/strong&gt;:&amp;nbsp;It centralizes all the configuration settings in one place, making it easier to manage and update settings without changing the application code.&lt;br&gt;&lt;li style=&quot;&quot;&gt;&lt;p&gt;&lt;font style=&quot;&quot;&gt;&lt;strong&gt;Environment-Specific Settings&lt;/strong&gt;:&amp;nbsp;&lt;/font&gt;While default.json&amp;nbsp;holds the default settings, you can have other configuration files like test.json&amp;nbsp;etc., for different environments. This allows the application to load the appropriate configuration based on the environment it&#39;s running in.&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;&quot;&gt;&lt;p&gt;&lt;font style=&quot;background-color: initial;&quot;&gt;&lt;strong&gt;Sensitive Information Storage&lt;/strong&gt;:&amp;nbsp;&lt;/font&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;It can store sensitive information such as API keys, database connection strings, and other credentials securely. This data should be handled carefully and often loaded from environment variables in production environments.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelBackgroundColor=none;fontColor=#000000;fillColor=#FFFFFF;align=left;gradientColor=none;strokeColor=#66FF66;strokeWidth=10;spacing=10;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="-18335" y="-1090" width="430" height="310" as="geometry" />
        </mxCell>
        <mxCell id="98" value="&lt;p&gt;&lt;font color=&quot;#000000&quot; style=&quot;font-size: 12px;&quot;&gt;The &lt;code style=&quot;&quot;&gt;test.json&lt;/code&gt; file in the &lt;code style=&quot;&quot;&gt;config&lt;/code&gt; folder is typically used to store configuration settings specific to the testing environment. When running tests, it&#39;s often necessary to use different settings than those used in development or production. This ensures that tests run in an isolated environment, avoiding interference with the actual development or production databases and services.&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(0, 0, 0); background-color: initial;&quot;&gt;Isolated Testing Environment&lt;/strong&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: initial;&quot;&gt;It ensures that the test environment is separate from the development and production environments. This isolation prevents tests from affecting real data and services.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(0, 0, 0); background-color: initial;&quot;&gt;Specific Configuration for Testing&lt;/strong&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: initial;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: initial;&quot;&gt;It provides configuration settings that are optimized for running tests. This might include different database URLs, API keys, or service endpoints that are specific to testing.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(0, 0, 0); background-color: initial;&quot;&gt;Consistency in Testing&lt;/strong&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: initial;&quot;&gt;It ensures that the tests run with consistent settings, making the results more reliable and repeatable. This consistency is crucial for debugging and verifying the correctness of the application.&lt;/span&gt;&lt;/p&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelBackgroundColor=none;fontSize=12;fontColor=#FFFFFF;fillColor=#FFFFFF;align=left;strokeColor=#66FF66;strokeWidth=10;spacing=10;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="-17875" y="-1090" width="430" height="300" as="geometry" />
        </mxCell>
        <mxCell id="NF-qdsWI1Lk5tkT5xwey-109" value="EMPTY" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-17507.5" y="-520" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="NF-qdsWI1Lk5tkT5xwey-111" value="&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;It ensures that errors are caught, logged, and responded to in a consistent manner, enhancing the application&#39;s robustness and user experience. Here&#39;s a detailed explanation of its purpose and how it works:&amp;nbsp;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Centralized Error Handling&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Provides a single place to handle all errors that occur in the application, ensuring consistency in error responses.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Improved Debugging&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Logs errors to a centralized logging system, making it easier to debug and trace issues.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;User-Friendly Error Responses&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Converts technical errors into user-friendly messages, improving the user experience.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#FFFFFF;align=left;spacing=10;gradientColor=none;strokeColor=#3333FF;strokeWidth=10;" parent="1" vertex="1">
          <mxGeometry x="-17037.5" y="-690" width="360" height="240" as="geometry" />
        </mxCell>
        <mxCell id="NF-qdsWI1Lk5tkT5xwey-113" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="NF-qdsWI1Lk5tkT5xwey-111" target="NF-qdsWI1Lk5tkT5xwey-111" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="NF-qdsWI1Lk5tkT5xwey-116" value="&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;Logging is crucial for monitoring the application&#39;s behavior, debugging issues, and maintaining an audit trail of important actions. Here&#39;s a detailed explanation of its purpose and typical implementation:&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Monitoring Application Behavior&amp;nbsp;&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Logs key events and actions within the application to help monitor its behavior and performance.&amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Debugging:&amp;nbsp;&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Provides detailed information about the application&#39;s execution flow, making it easier to debug issues when they arise.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Auditing&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Maintains a record of important actions and events, which can be useful for auditing and analyzing the application&#39;s usage.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Error Tracking&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Logs errors and exceptions to help identify and diagnose issues in the application.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;h3&gt;&lt;/h3&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#FFFFFF;align=left;spacing=10;gradientColor=none;strokeColor=#3333FF;strokeWidth=10;" parent="1" vertex="1">
          <mxGeometry x="-16657.5" y="-690" width="360" height="280" as="geometry" />
        </mxCell>
        <mxCell id="105" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#3333FF;" parent="1" source="uyjnw9hmqIAHE5pw0u9W-98" target="uyjnw9hmqIAHE5pw0u9W-100" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-98" value="&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;The &lt;code style=&quot;&quot;&gt;rateLimiter.js&lt;/code&gt; file in the middleware folder is responsible for controlling the rate at which requests are processed by the application. Rate limiting is an essential feature to protect the application from abuse, such as denial-of-service (DoS) attacks, and to ensure fair usage of resources among all users. Here&#39;s a detailed explanation of its purpose and typical implementation:&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Preventing Abuse&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Protects the application from being overwhelmed by too many requests in a short period, which could be due to malicious attacks or accidental overuse.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Ensuring Fair Usage&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Ensures that all users have fair access to the application&#39;s resources by limiting the number of requests a single user or IP can make within a given timeframe.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Improving Performance&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Helps maintain the performance and responsiveness of the application by preventing excessive load.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Reducing Server Load&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Limits the number of requests processed by the server, which can help reduce the load and improve stability.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;gradientColor=none;fillColor=#FFFFFF;spacing=10;strokeColor=#3333FF;strokeWidth=10;" parent="1" vertex="1">
          <mxGeometry x="-16267.5" y="-690" width="320" height="380" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-100" value="&lt;h3&gt;&lt;font color=&quot;#000000&quot;&gt;Explanation of Each Part:&lt;/font&gt;&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;Import Express-Rate-Limit&lt;/strong&gt;:&lt;/font&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;code&gt;&lt;font color=&quot;#000000&quot;&gt;const rateLimit = require(&#39;express-rate-limit&#39;);&lt;/font&gt;&lt;/code&gt;: Imports the &lt;code&gt;&lt;font color=&quot;#000000&quot;&gt;express-rate-limit&lt;/font&gt;&lt;/code&gt; library.&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;Define Rate Limit Rule&lt;/strong&gt;:&lt;/font&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;code&gt;const limiter = rateLimit({ ... });&lt;/code&gt;: Configures the rate limiting rule.&lt;/font&gt;&lt;ul&gt;&lt;li&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;code&gt;windowMs: 15 * 60 * 1000&lt;/code&gt;: Sets the time window for the rate limiting to 15 minutes.&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;code&gt;&lt;font color=&quot;#000000&quot;&gt;max: 10&lt;/font&gt;0&lt;/code&gt;: Limits each IP to 100 requests per 15 minutes.&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;code&gt;message: &#39;Too many requests from this IP, please try again after 15 minutes&#39;&lt;/code&gt;: Customizes the response message when the rate limit is exceeded.&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;Export the Limiter&lt;/strong&gt;:&lt;/font&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;code&gt;module.exports = limiter;&lt;/code&gt;: Exports the configured rate limiter so it can be used in other parts of the application.&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;font color=&quot;#000000&quot;&gt;Usage in the Application:&lt;/font&gt;&lt;/h3&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;To use the &lt;code&gt;rateLimiter.js&lt;/code&gt; middleware in your application, you would typically include it in your main server file (e.g., &lt;code&gt;server.js&lt;/code&gt;) early in the middleware stack to apply rate limiting to all incoming requests or to specific routes.&lt;/font&gt;&lt;/p&gt;&lt;h3&gt;&lt;/h3&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#f5f5f5;fontColor=#333333;strokeColor=#FF00FF;strokeWidth=10;perimeterSpacing=10;verticalAlign=top;spacingTop=0;spacing=10;" parent="1" vertex="1">
          <mxGeometry x="-16272.5" y="-1370" width="330" height="600" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-103" value="&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;The &lt;code&gt;validate.js&lt;/code&gt; file in the middleware folder is responsible for validating incoming requests to ensure they meet certain criteria before being processed by the application. This is crucial for maintaining data integrity, preventing security vulnerabilities, and providing a better user experience by catching errors early. Here&#39;s a detailed explanation of its purpose and typical implementation:&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Data Integrity&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Ensures that the data sent by clients meets the required format and constraints, which helps maintain the integrity of the application&#39;s data.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Security&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Prevents malicious or malformed data from reaching the core application logic, reducing the risk of security vulnerabilities like SQL injection, XSS, and other attacks.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;User Experience&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Provides immediate feedback to users if their input is invalid, improving the overall user experience by avoiding processing invalid data.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Error Reduction&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Catches errors early in the request lifecycle, reducing the chances of encountering unexpected issues further down the line.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#FFFFFF;spacing=10;gradientColor=none;strokeColor=#3333FF;strokeWidth=10;" parent="1" vertex="1">
          <mxGeometry x="-15927.5" y="-690" width="440" height="300" as="geometry" />
        </mxCell>
        <mxCell id="108" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#00FFFF;" parent="1" source="uyjnw9hmqIAHE5pw0u9W-107" target="uyjnw9hmqIAHE5pw0u9W-109" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-107" value="&lt;p&gt;he &lt;code&gt;Clan.js&lt;/code&gt; file under the &lt;code&gt;models&lt;/code&gt; folder in a Node.js application using MongoDB (typically with Mongoose) defines the schema and model for the &quot;Clan&quot; entity. This file is crucial for interacting with the database in a structured and consistent manner. Here’s a detailed explanation of its purpose and typical content:&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Define Schema&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Specifies the structure of the &quot;Clan&quot; documents stored in the MongoDB database, including fields, data types, and validation rules.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Create Model&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Creates a Mongoose model based on the schema, which provides an interface for interacting with the &quot;Clan&quot; documents in the database (e.g., querying, creating, updating, and deleting clans).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Data Validation&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Ensures that the data adheres to the defined schema, providing validation before data is saved to the database.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Database Interaction&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Encapsulates the database logic for the &quot;Clan&quot; entity, making it easier to manage and interact with clan data.&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;/h3&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#FFFFFF;fontColor=#000000;spacing=10;strokeColor=#00FFFF;strokeWidth=10;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="-15572.5" y="610" width="570" height="370" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-109" value="&lt;h3&gt;Explanation of Each Part:&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Import Mongoose&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;const mongoose = require(&#39;mongoose&#39;);&lt;/code&gt;: Imports the Mongoose library, which is used for interacting with MongoDB.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Define the Clan Schema&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;const ClanSchema = new mongoose.Schema({ ... });&lt;/code&gt;: Defines the schema for the &quot;Clan&quot; collection.&lt;ul&gt;&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: A string field for the clan&#39;s name, which is required, unique, and trimmed.&lt;/li&gt;&lt;li&gt;&lt;code&gt;description&lt;/code&gt;: A string field for the clan&#39;s description, which is optional and trimmed.&lt;/li&gt;&lt;li&gt;&lt;code&gt;createdDate&lt;/code&gt;: A date field for when the clan was created, with a default value of the current date.&lt;/li&gt;&lt;li&gt;&lt;code&gt;members&lt;/code&gt;: An array of ObjectIds that reference the &quot;User&quot; collection, representing the members of the clan.&lt;/li&gt;&lt;li&gt;&lt;code&gt;leader&lt;/code&gt;: An ObjectId that references the &quot;User&quot; collection, representing the leader of the clan, which is required.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create the Clan Model&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;const Clan = mongoose.model(&#39;Clan&#39;, ClanSchema);&lt;/code&gt;: Creates a Mongoose model named &quot;Clan&quot; based on the defined schema.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Export the Model&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;module.exports = Clan;&lt;/code&gt;: Exports the Clan model so it can be used in other parts of the application.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Usage in the Application:&lt;/h3&gt;&lt;p&gt;The Clan model can be used in different parts of the application to perform CRUD operations on the &quot;Clan&quot; collection.&lt;/p&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#FFFFFF;fontColor=#000000;spacing=10;strokeWidth=10;strokeColor=#FF33FF;" parent="1" vertex="1">
          <mxGeometry x="-15572.5" y="-60" width="570" height="610" as="geometry" />
        </mxCell>
        <mxCell id="109" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#00FFFF;" parent="1" source="uyjnw9hmqIAHE5pw0u9W-111" target="uyjnw9hmqIAHE5pw0u9W-113" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-111" value="&lt;p&gt;The &lt;code&gt;Match.js&lt;/code&gt; file under the &lt;code&gt;models&lt;/code&gt; folder in a Node.js application using MongoDB (typically with Mongoose) defines the schema and model for the &quot;Match&quot; entity. This file is crucial for structuring, validating, and interacting with match data in the database. Here’s a detailed explanation of its purpose and typical content:&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Define Schema&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Specifies the structure of the &quot;Match&quot; documents stored in the MongoDB database, including fields, data types, and validation rules.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Create Model&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Creates a Mongoose model based on the schema, which provides an interface for interacting with the &quot;Match&quot; documents in the database (e.g., querying, creating, updating, and deleting matches).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Data Validation&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Ensures that the data adheres to the defined schema, providing validation before data is saved to the database.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Database Interaction&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Encapsulates the database logic for the &quot;Match&quot; entity, making it easier to manage and interact with match data.&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;/h3&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#FFFFFF;fontColor=#000000;spacing=10;strokeColor=#00FFFF;strokeWidth=10;" parent="1" vertex="1">
          <mxGeometry x="-14952.5" y="610" width="570" height="270" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-113" value="&lt;h3&gt;Explanation of Each Part:&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Import Mongoose&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;const mongoose = require(&#39;mongoose&#39;);&lt;/code&gt;: Imports the Mongoose library, which is used for interacting with MongoDB.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Define the Match Schema&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;const MatchSchema = new mongoose.Schema({ ... });&lt;/code&gt;: Defines the schema for the &quot;Match&quot; collection.&lt;ul&gt;&lt;li&gt;&lt;code&gt;clan1&lt;/code&gt;: An ObjectId that references the &quot;Clan&quot; collection, representing one of the clans in the match, which is required.&lt;/li&gt;&lt;li&gt;&lt;code&gt;clan2&lt;/code&gt;: An ObjectId that references the &quot;Clan&quot; collection, representing the other clan in the match, which is required.&lt;/li&gt;&lt;li&gt;&lt;code&gt;scoreClan1&lt;/code&gt;: A number representing the score of the first clan, which is required.&lt;/li&gt;&lt;li&gt;&lt;code&gt;scoreClan2&lt;/code&gt;: A number representing the score of the second clan, which is required.&lt;/li&gt;&lt;li&gt;&lt;code&gt;date&lt;/code&gt;: A date field representing when the match took place, which is required.&lt;/li&gt;&lt;li&gt;&lt;code&gt;location&lt;/code&gt;: A string field representing the location of the match, which is optional and trimmed.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create the Match Model&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;const Match = mongoose.model(&#39;Match&#39;, MatchSchema);&lt;/code&gt;: Creates a Mongoose model named &quot;Match&quot; based on the defined schema.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Export the Model&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;module.exports = Match;&lt;/code&gt;: Exports the Match model so it can be used in other parts of the application.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;/h3&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#FFFFFF;fontColor=#000000;spacing=10;strokeWidth=10;strokeColor=#FF33FF;" parent="1" vertex="1">
          <mxGeometry x="-14952.5" y="-60" width="570" height="560" as="geometry" />
        </mxCell>
        <mxCell id="114" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#00FFFF;" parent="1" source="uyjnw9hmqIAHE5pw0u9W-115" target="uyjnw9hmqIAHE5pw0u9W-116" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-115" value="&lt;p&gt;The &lt;code&gt;Match.js&lt;/code&gt; file under the &lt;code&gt;models&lt;/code&gt; folder in a Node.js application using MongoDB (typically with Mongoose) defines the schema and model for the &quot;Match&quot; entity. This file is crucial for structuring, validating, and interacting with match data in the database. Here’s a detailed explanation of its purpose and typical content:&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Define Schema&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Specifies the structure of the &quot;Match&quot; documents stored in the MongoDB database, including fields, data types, and validation rules.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Create Model&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Creates a Mongoose model based on the schema, which provides an interface for interacting with the &quot;Match&quot; documents in the database (e.g., querying, creating, updating, and deleting matches).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Data Validation&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Ensures that the data adheres to the defined schema, providing validation before data is saved to the database.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Database Interaction&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Encapsulates the database logic for the &quot;Match&quot; entity, making it easier to manage and interact with match data.&lt;/span&gt;&lt;/p&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#FFFFFF;fontColor=#000000;spacing=10;strokeColor=#00FFFF;strokeWidth=10;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="-14332.5" y="610" width="580" height="290" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-116" value="&lt;h3&gt;Explanation of Each Part:&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Import Mongoose&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;const mongoose = require(&#39;mongoose&#39;);&lt;/code&gt;: Imports the Mongoose library, which is used for interacting with MongoDB.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Define the Match Schema&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;const MatchSchema = new mongoose.Schema({ ... });&lt;/code&gt;: Defines the schema for the &quot;Match&quot; collection.&lt;ul&gt;&lt;li&gt;&lt;code&gt;clan1&lt;/code&gt;: An ObjectId that references the &quot;Clan&quot; collection, representing one of the clans in the match, which is required.&lt;/li&gt;&lt;li&gt;&lt;code&gt;clan2&lt;/code&gt;: An ObjectId that references the &quot;Clan&quot; collection, representing the other clan in the match, which is required.&lt;/li&gt;&lt;li&gt;&lt;code&gt;scoreClan1&lt;/code&gt;: A number representing the score of the first clan, which is required.&lt;/li&gt;&lt;li&gt;&lt;code&gt;scoreClan2&lt;/code&gt;: A number representing the score of the second clan, which is required.&lt;/li&gt;&lt;li&gt;&lt;code&gt;date&lt;/code&gt;: A date field representing when the match took place, which is required.&lt;/li&gt;&lt;li&gt;&lt;code&gt;location&lt;/code&gt;: A string field representing the location of the match, which is optional and trimmed.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create the Match Model&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;const Match = mongoose.model(&#39;Match&#39;, MatchSchema);&lt;/code&gt;: Creates a Mongoose model named &quot;Match&quot; based on the defined schema.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Export the Model&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;module.exports = Match;&lt;/code&gt;: Exports the Match model so it can be used in other parts of the application.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#FFFFFF;fontColor=#000000;spacing=10;strokeWidth=10;strokeColor=#FF33FF;" parent="1" vertex="1">
          <mxGeometry x="-14332.5" y="-60" width="580" height="570" as="geometry" />
        </mxCell>
        <mxCell id="117" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;fontColor=#000000;strokeWidth=4;strokeColor=#00FFFF;" parent="1" source="uyjnw9hmqIAHE5pw0u9W-119" target="uyjnw9hmqIAHE5pw0u9W-121" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-119" value="&lt;p&gt;The &lt;code&gt;User.js&lt;/code&gt; file under the &lt;code&gt;models&lt;/code&gt; folder in a Node.js application using MongoDB (typically with Mongoose) defines the schema and model for the &quot;User&quot; entity. This file is crucial for structuring, validating, and interacting with user data in the database. Here’s a detailed explanation of its purpose and typical content:&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Define Schema&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Specifies the structure of the &quot;User&quot; documents stored in the MongoDB database, including fields, data types, and validation rules.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Create Model&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Creates a Mongoose model based on the schema, which provides an interface for interacting with the &quot;User&quot; documents in the database (e.g., querying, creating, updating, and deleting users).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Data Validation&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Ensures that the data adheres to the defined schema, providing validation before data is saved to the database.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Database Interaction&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Encapsulates the database logic for the &quot;User&quot; entity, making it easier to manage and interact with user data.&lt;/span&gt;&lt;/p&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#FFFFFF;fontColor=#000000;spacing=10;strokeColor=#00FFFF;strokeWidth=10;" parent="1" vertex="1">
          <mxGeometry x="-13702.5" y="605" width="580" height="300" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-121" value="&lt;h3&gt;Explanation of Each Part:&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Import Mongoose&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;const mongoose = require(&#39;mongoose&#39;);&lt;/code&gt;: Imports the Mongoose library, which is used for interacting with MongoDB.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Define the User Schema&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;const UserSchema = new mongoose.Schema({ ... });&lt;/code&gt;: Defines the schema for the &quot;User&quot; collection.&lt;ul&gt;&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: A string field for the user&#39;s name, which is required and trimmed.&lt;/li&gt;&lt;li&gt;&lt;code&gt;email&lt;/code&gt;: A string field for the user&#39;s email, which is required, unique, trimmed, and converted to lowercase.&lt;/li&gt;&lt;li&gt;&lt;code&gt;password&lt;/code&gt;: A string field for the user&#39;s password, which is required.&lt;/li&gt;&lt;li&gt;&lt;code&gt;role&lt;/code&gt;: A string field for the user&#39;s role, which is an enum with possible values &#39;user&#39; or &#39;admin&#39;, and defaults to &#39;user&#39;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;createdDate&lt;/code&gt;: A date field for when the user was created, with a default value of the current date.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create the User Model&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;const User = mongoose.model(&#39;User&#39;, UserSchema);&lt;/code&gt;: Creates a Mongoose model named &quot;User&quot; based on the defined schema.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Export the Model&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;module.exports = User;&lt;/code&gt;: Exports the User model so it can be used in other parts of the application.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#FFFFFF;align=left;fontColor=#000000;spacing=10;strokeColor=#FF33FF;strokeWidth=10;" parent="1" vertex="1">
          <mxGeometry x="-13702.5" y="-60" width="580" height="520" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-130" value="&lt;p&gt;The &lt;code&gt;admin.js&lt;/code&gt; file under the &lt;code&gt;routes&lt;/code&gt; folder in a Node.js application typically contains route definitions and handlers specific to administrative operations. These routes are usually protected by authentication and authorization middleware to ensure that only users with the appropriate administrative roles can access them. Here’s a detailed explanation of its purpose and typical content:&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Define Admin-Specific Routes&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Contains routes that handle administrative tasks such as managing users, viewing system logs, and other operations that require elevated privileges.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Enforce Authorization&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Uses middleware to ensure that only authenticated users with administrative roles can access these routes. This prevents unauthorized access to sensitive operations.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;background-color: initial;&quot;&gt;Encapsulate Admin Logic&lt;/strong&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Encapsulates the business logic related to administrative tasks, keeping the code organized and modular.&lt;/span&gt;&lt;/p&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=none;strokeColor=#FF66B3;strokeWidth=6;" parent="1" vertex="1">
          <mxGeometry x="-17670" y="2030" width="520" height="250" as="geometry" />
        </mxCell>
        <mxCell id="uyjnw9hmqIAHE5pw0u9W-134" value="&lt;h3&gt;Common Functions in &lt;code&gt;auth.js&lt;/code&gt;&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;User Registration&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;POST /register&lt;/strong&gt;: Register a new user.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;User Login&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;POST /login&lt;/strong&gt;: Authenticate a user and provide a token.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Get User Information&lt;/strong&gt;:&lt;/p&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;GET /me&lt;/strong&gt;: Get the currently logged-in user&#39;s information.&amp;nbsp; &amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;User Registration&lt;/strong&gt; (&lt;code&gt;POST /register&lt;/code&gt;):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Validates input fields (name, email, password) using &lt;code&gt;express-validator&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Checks if the user already exists in the database.&lt;/li&gt;&lt;li&gt;Hashes the password using &lt;code&gt;bcrypt&lt;/code&gt; and saves the new user.&lt;/li&gt;&lt;li&gt;Generates a JWT token for the user and sends it in the response.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;User Login&lt;/strong&gt; (&lt;code&gt;POST /login&lt;/code&gt;):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Validates input fields (email, password) using &lt;code&gt;express-validator&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Checks if the user exists and if the password matches.&lt;/li&gt;&lt;li&gt;Generates a JWT token for the user and sends it in the response.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Get User Information&lt;/strong&gt; (&lt;code&gt;GET /me&lt;/code&gt;):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Uses &lt;code&gt;auth&lt;/code&gt; middleware to ensure the request is authenticated.&lt;/li&gt;&lt;li&gt;Retrieves the user information from the database (excluding the password) and sends it in the response.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=none;align=left;strokeColor=#FF66B3;perimeterSpacing=6;strokeWidth=6;" parent="1" vertex="1">
          <mxGeometry x="-17100" y="1820" width="800" height="460" as="geometry" />
        </mxCell>
        <mxCell id="129" value="&lt;h3 style=&quot;font-size: 10px;&quot;&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Product Vision Document&lt;/font&gt;&lt;/h3&gt;&lt;p style=&quot;font-size: 10px;&quot;&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;&lt;strong&gt;Product Name:&lt;/strong&gt; Clan Match Stat Tracker&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;font-size: 10px;&quot;&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;&lt;strong&gt;Vision Statement:&lt;/strong&gt;&lt;br&gt;Our goal is to create a tracking metric akin to the TRN tracker network, tailored for a closed system in local clan matches. The system will track the progress and stats of clan matches, provide detailed player statistics within tournaments, and facilitate the organization of matches between teams. It will also help in organizing players according to teams and teams according to tournaments.&lt;/font&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;h4 style=&quot;font-size: 10px;&quot;&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Objectives:&lt;/font&gt;&lt;/h4&gt;&lt;ol style=&quot;font-size: 10px;&quot;&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;&lt;strong&gt;Track Clan Matches&lt;/strong&gt;: Record and display detailed statistics of clan matches.&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;&lt;strong&gt;Player Statistics&lt;/strong&gt;: Maintain and present individual player stats throughout tournaments.&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;&lt;strong&gt;Match Organization&lt;/strong&gt;: Aid in organizing matches between teams and managing players within those teams.&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;&lt;strong&gt;OCR Component&lt;/strong&gt;: Implement an OCR component for managers to upload images of match stats. The system will transcribe the information from the images into a table in the database.&lt;/font&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;h3 style=&quot;font-size: 10px;&quot;&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Structured Levels of Roles&lt;/font&gt;&lt;/h3&gt;&lt;ol style=&quot;font-size: 10px;&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Admin&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Controls everything and everyone.&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Full access to all data and functionalities.&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Managers&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Control their teams (clan leaders or appointed managers).&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Ability to upload match stats using the OCR component.&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Organize matches and schedule events.&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Players&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Lowest privileges.&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;View stats and calendar to see match times.&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;h3 style=&quot;font-size: 10px;&quot;&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Design Centered Around a Calendar&lt;/font&gt;&lt;/h3&gt;&lt;p style=&quot;font-size: 10px;&quot;&gt;&lt;strong&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Player Main Screen:&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul style=&quot;font-size: 10px;&quot;&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Stats&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Calendar&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;font-size: 10px;&quot;&gt;&lt;strong&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Manager Main Screen:&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul style=&quot;font-size: 10px;&quot;&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Stats&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Calendar&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Dashboard (similar to a Trello board to track match organization and schedule events that reflect on everyone&#39;s calendars)&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;font-size: 10px;&quot;&gt;&lt;strong&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Admin Main Screen:&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul style=&quot;font-size: 10px;&quot;&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Stats&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Calendar&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Master Dashboard&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;h3 style=&quot;font-size: 10px;&quot;&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;Summary&lt;/font&gt;&lt;/h3&gt;&lt;p style=&quot;font-size: 10px;&quot;&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;The Clan Match Stat Tracker is designed to be an efficient tool for tracking and managing clan matches. It provides structured roles to ensure proper access and control, centered around a calendar interface for easy scheduling and organization. With an OCR component, managers can easily upload match stats, making the process seamless and accurate. This system aims to streamline the organization of tournaments and provide detailed insights into both team and player performances.&lt;/font&gt;&lt;/p&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=30;fontColor=#000000;align=left;perimeterSpacing=5;fillColor=#FFFFFF;strokeColor=#66FF66;strokeWidth=10;spacing=20;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="-18338.15" y="10" width="507.5" height="850" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-129" value="&lt;h3&gt;Key Functions of Routes Files&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Routing Requests&lt;/strong&gt;: Routes files define how HTTP requests (GET, POST, PUT, DELETE, etc.) are handled. They map URLs to specific functions or controllers that handle the requests.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Middleware&lt;/strong&gt;: They can include middleware functions that run before the main handler function, which can be used for authentication, validation, logging, etc.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Organizing Code&lt;/strong&gt;: Routes files help organize the server-side code by grouping related routes together, making the codebase easier to manage and understand.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Handling Responses&lt;/strong&gt;: They determine the responses sent back to the client, whether it&#39;s rendering a view, sending JSON data, or redirecting to another page.&lt;/li&gt;&lt;/ol&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;strokeColor=#FF66B3;strokeWidth=6;perimeterSpacing=5;" vertex="1" parent="1">
          <mxGeometry x="-18870" y="2250" width="580" height="200" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-133" value="File Explanation&amp;nbsp;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;The &lt;code&gt;manager.js&lt;/code&gt; file provides routes for managers to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Retrieve clan users they manage.&lt;/li&gt;&lt;li&gt;Create new users and assign them to their clan.&lt;/li&gt;&lt;li&gt;Create new matches.&lt;/li&gt;&lt;li&gt;Record scores for matches.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Each route is protected by authentication and role-based authorization to ensure only managers can access these functionalities. This setup ensures that managers have the necessary tools to manage their clans effectively.&lt;/p&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=none;strokeColor=#FF66B3;strokeWidth=6;perimeterSpacing=6;" vertex="1" parent="1">
          <mxGeometry x="-16260" y="1920" width="570" height="355" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-135" value="&lt;ol&gt;&lt;li&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;strong&gt;Authentication Middleware&lt;/strong&gt;:&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;Ensures the user is logged in by verifying a token.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;strong&gt;Authorization Middleware&lt;/strong&gt;:&lt;span style=&quot;background-color: initial;&quot;&gt;Checks if the user has the required role (e.g., Admin, Manager).&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;h4&gt;Authentication Middleware (&lt;code&gt;auth&lt;/code&gt;)&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extracting Token&lt;/strong&gt;:&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;The token is extracted from the &lt;/span&gt;&lt;code style=&quot;background-color: initial;&quot;&gt;x-auth-token&lt;/code&gt;&lt;span style=&quot;background-color: initial;&quot;&gt; header of the request.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Checking for Token&lt;/strong&gt;:&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;If no token is provided, a &lt;/span&gt;&lt;code style=&quot;background-color: initial;&quot;&gt;401 Unauthorized&lt;/code&gt;&lt;span style=&quot;background-color: initial;&quot;&gt; response is sent back.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verifying Token&lt;/strong&gt;:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The token is verified using &lt;code&gt;jwt.verify&lt;/code&gt; with a secret key from the configuration.&lt;/li&gt;&lt;li&gt;If valid, the decoded token&#39;s payload is attached to &lt;code&gt;req.user&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;If invalid, a &lt;code&gt;401 Unauthorized&lt;/code&gt; response is sent back.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Proceeding to Next Middleware&lt;/strong&gt;:&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;If the token is valid, the request proceeds to the next middleware or route handler.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;Authorization Middleware (&lt;code&gt;role&lt;/code&gt;)&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ensuring Authentication&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Checks if &lt;code&gt;req.user&lt;/code&gt; exists, which means the user is authenticated.&lt;/li&gt;&lt;li&gt;If not, a &lt;code&gt;401 Unauthorized&lt;/code&gt; response is sent back.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Checking User Role&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Verifies if the user&#39;s role is included in the list of allowed roles.&lt;/li&gt;&lt;li&gt;If not, a &lt;code&gt;403 Forbidden&lt;/code&gt; response is sent back with a message indicating insufficient permissions.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Proceeding to Next Middleware&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the user&#39;s role is authorized, the request proceeds to the next middleware or route handler.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;protectedRoute.js&lt;/code&gt; file provides middleware for:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: Ensuring the user is logged in by verifying a JWT token.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Authorization&lt;/strong&gt;: Checking if the user has the necessary role to access a particular route.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This setup is crucial for securing routes in your application, ensuring that only authenticated and authorized users can perform certain actions.&lt;/p&gt;&lt;/div&gt;&lt;h3&gt;&lt;/h3&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=none;strokeColor=#FF66B3;strokeWidth=6;perimeterSpacing=6;" vertex="1" parent="1">
          <mxGeometry x="-15640" y="1640" width="780" height="640" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-137" value="&lt;h3 style=&quot;&quot;&gt;&lt;p style=&quot;text-align: left;&quot;&gt;The &lt;code style=&quot;&quot;&gt;user.js&lt;/code&gt; file provides routes fo&lt;span style=&quot;font-weight: normal;&quot;&gt;r:&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;Retrieving a list of all users (admin only).&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;Retrieving information about a specific user.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;Updating details of a specific user.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;Deleting a specific user (admin only).&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;Each route is protected by authentication and role-based authorisation to ensure that only authorised users can perform these actions. This setup ensures that user-related operations are secure and properly managed.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/h3&gt;&lt;h3&gt;&lt;/h3&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=none;strokeColor=#FF66B3;strokeWidth=6;perimeterSpacing=6;" vertex="1" parent="1">
          <mxGeometry x="-14750" y="1980" width="630" height="295" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-140" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;strokeColor=#FF66B3;strokeWidth=6;" edge="1" parent="1" source="48" target="49">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="-18018" y="2350" as="sourcePoint" />
            <mxPoint x="-16650" y="3270" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-147" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;strokeColor=#FF66B3;strokeWidth=6;" edge="1" parent="1" source="49" target="uyjnw9hmqIAHE5pw0u9W-130">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="49" value="admins.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;labelBackgroundColor=none;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-17860" y="2310" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-150" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeColor=#FF66B3;strokeWidth=6;" edge="1" parent="1" source="52" target="F73SnjRVBJ_aOkL58M_I-135">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="52" value="protectedRoute.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;labelBackgroundColor=none;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-17860" y="2610" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-151" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;strokeColor=#FF66B3;strokeWidth=6;" edge="1" parent="1" source="53" target="F73SnjRVBJ_aOkL58M_I-137">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="53" value="user.js" style="shape=hexagon;perimeter=hexagonPerimeter2;whiteSpace=wrap;html=1;fixedSize=1;labelBackgroundColor=none;fontColor=#ffffff;fillColor=#1ba1e2;strokeColor=#006EAF;" parent="1" vertex="1">
          <mxGeometry x="-17860" y="2710" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-158" value="&lt;h3&gt;&lt;font style=&quot;font-size: 14.04px;&quot;&gt;1. &lt;code&gt;EmailService.js&lt;/code&gt;&lt;/font&gt;&lt;/h3&gt;&lt;p style=&quot;font-size: 14.04px;&quot;&gt;&lt;font style=&quot;font-size: 14.04px;&quot;&gt;The &lt;code&gt;EmailService.js&lt;/code&gt; file is typically responsible for handling email-related operations, such as sending emails for account verification, password reset, or notifications.&lt;/font&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;nodemailer&lt;/strong&gt;: A module for sending emails.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;transporter&lt;/strong&gt;: Configures the email transport method using Gmail&#39;s SMTP.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;sendEmail&lt;/strong&gt;: A function to send an email with the specified recipient, subject, and text.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;2. &lt;code&gt;NotificationService.js&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;NotificationService.js&lt;/code&gt; file is typically responsible for handling notifications within the application, such as sending notifications to users about events, updates, or messages.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;sendNotification&lt;/strong&gt;: Creates and saves a new notification for a user.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;getNotifications&lt;/strong&gt;: Retrieves all notifications for a specific user, sorted by date in descending order.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;3. &lt;code&gt;UserService.js&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;UserService.js&lt;/code&gt; file is typically responsible for handling user-related operations, such as creating, updating, deleting, and retrieving user data, as well as authentication.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;registerUser&lt;/strong&gt;: Registers a new user, hashes the password, saves the user, and generates a JWT token.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;authenticateUser&lt;/strong&gt;: Authenticates a user by comparing the provided password with the stored hashed password, and generates a JWT token if successful.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;getUserById&lt;/strong&gt;: Retrieves a user by their ID, excluding the password.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;updateUser&lt;/strong&gt;: Updates user details, hashing the password if it&#39;s being updated.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;EmailService&lt;/strong&gt;: Handles sending emails.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;NotificationService&lt;/strong&gt;: Manages notifications for users.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;UserService&lt;/strong&gt;: Deals with user operations, including registration, authentication, retrieval, and updates.&lt;/li&gt;&lt;/ul&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=none;strokeColor=#006600;strokeWidth=6;" vertex="1" parent="1">
          <mxGeometry x="-19810" y="986" width="640" height="540" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-160" value="Example Code for &lt;code&gt;NotificationService.js&lt;/code&gt;&lt;div&gt;&lt;code&gt;&lt;br&gt;&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;&lt;h4&gt;Notification Service Functions&amp;nbsp;&lt;/h4&gt;&lt;h4&gt;&lt;strong style=&quot;background-color: initial; font-family: Helvetica;&quot;&gt;Send Notification&lt;/strong&gt;&lt;span style=&quot;background-color: initial; font-family: Helvetica; font-weight: normal;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;Creates and saves a new notification for a user.&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;strong style=&quot;background-color: initial; font-family: Helvetica;&quot;&gt;Get Notifications&lt;/strong&gt;&lt;span style=&quot;background-color: initial; font-family: Helvetica; font-weight: normal;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial; font-weight: normal; font-family: Helvetica;&quot;&gt;Retrieves all notifications for a specific user.&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;strong style=&quot;background-color: initial; font-family: Helvetica;&quot;&gt;Mark Notification as Read&lt;/strong&gt;&lt;span style=&quot;background-color: initial; font-family: Helvetica; font-weight: normal;&quot;&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial; font-weight: normal; font-family: Helvetica;&quot;&gt;Marks a specific notification as read.&lt;/span&gt;&lt;/h4&gt;&lt;/code&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=none;strokeColor=#006600;strokeWidth=6;" vertex="1" parent="1">
          <mxGeometry x="-20360" y="1326" width="470" height="200" as="geometry" />
        </mxCell>
        <mxCell id="F73SnjRVBJ_aOkL58M_I-162" value="Example Code for &lt;code&gt;UserService.js&lt;/code&gt;&lt;div&gt;&lt;code&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;bcryptjs&lt;/strong&gt;: Used for hashing passwords.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;jsonwebtoken&lt;/strong&gt;: Used for generating and verifying JWT tokens.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;config&lt;/strong&gt;: Used for accessing configuration variables.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;User&lt;/strong&gt;: The user model representing the user collection in the database.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;User Service Functions&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Register User&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Hash the user&#39;s password.&lt;/li&gt;&lt;li&gt;Save the user to the database.&lt;/li&gt;&lt;li&gt;Generate a JWT token for the user.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Authenticate User&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Verify the user&#39;s credentials.&lt;/li&gt;&lt;li&gt;Generate a JWT token if the credentials are correct.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Get User by ID&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Retrieve user data by ID.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Update User&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Update user details in the database.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Delete User&lt;/strong&gt;:&lt;/p&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Remove a user from the database.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;strong&gt;authenticateUser&lt;/strong&gt;: This function authenticates a user.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;It finds the user by email.&lt;/li&gt;&lt;li&gt;If the user does not exist, it throws an error.&lt;/li&gt;&lt;li&gt;If the user exists, it compares the provided password with the stored hashed password using bcrypt.&lt;/li&gt;&lt;li&gt;If the passwords do not match, it throws an error.&lt;/li&gt;&lt;li&gt;If the passwords match, a JWT token is generated and returned.&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;div&gt;&lt;strong&gt;getUserById&lt;/strong&gt;: This function retrieves a user by their ID.&lt;ul&gt;&lt;li&gt;It finds the user by ID and excludes the password from the returned data.&lt;/li&gt;&lt;li&gt;If the user is not found, it throws an error.&lt;/li&gt;&lt;li&gt;If the user is found, it returns the user data.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;strong&gt;updateUser&lt;/strong&gt;: This function updates user details.&lt;ul&gt;&lt;li&gt;If the password is being updated, it hashes the new password using bcrypt.&lt;/li&gt;&lt;li&gt;It finds the user by ID and updates their details using &lt;code&gt;User.findByIdAndUpdate&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;If the user is not found, it throws an error.&lt;/li&gt;&lt;li&gt;If the user is found, it returns the updated user data.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;deleteUser&lt;/strong&gt;: This function deletes a user by their ID.&lt;ul&gt;&lt;li&gt;It finds the user by ID and deletes them using &lt;code&gt;User.findByIdAndDelete&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;If the user is not found, it throws an error.&lt;/li&gt;&lt;li&gt;If the user is found and deleted, it returns the deleted user data.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;UserService.js&lt;/code&gt; file provides functions for:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Registering Users&lt;/strong&gt;: Creating new user accounts with hashed passwords and generating JWT tokens.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Authenticating Users&lt;/strong&gt;: Verifying user credentials and generating JWT tokens.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Getting User Data&lt;/strong&gt;: Retrieving user data by ID.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Updating User Data&lt;/strong&gt;: Updating user details, including hashing new passwords.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Deleting Users&lt;/strong&gt;: Removing user accounts from the database.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=none;align=left;strokeColor=#006600;strokeWidth=6;" vertex="1" parent="1">
          <mxGeometry x="-21320" y="590" width="880" height="940" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
